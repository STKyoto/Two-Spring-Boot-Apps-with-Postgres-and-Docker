version: "3.8"

services:
  auth-api:
    build:
      context: .
      dockerfile: ./auth-api/Dockerfile
    container_name: auth-api
    ports:
      - "8080:8080"
    depends_on:
      db:
         condition: service_healthy
    env_file:
      - ./.env
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - INTERNAL_TOKEN=${INTERNAL_TOKEN}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - DATA_API_BASE_URL=${DATA_API_BASE_URL}

  data-api:
    build:
      context: .
      dockerfile: ./data-api/Dockerfile
    container_name: data-api
    ports:
      - "8081:8081"
    environment:
      - INTERNAL_TOKEN=${INTERNAL_TOKEN}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./.env

  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: demo_db
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  db_data: